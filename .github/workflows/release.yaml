name: Release

permissions:
  contents: write

on:
  workflow_dispatch:
    inputs:
      binary_name:
        type: choice
        description: "Binary name for release"
        required: true
        options:
          - ssadecrypt
          - shiori
          - minyami
        default: ssadecrypt
      create_release:
        type: boolean
        description: "Create a release"
        default: true
      build_ffmpeg:
        type: boolean
        description: "Build ffmpeg"
        default: false
      features:
        type: string
        description: "Custom features to build"
      archive_suffix:
        type: choice
        description: "Suffix for the archive bin filename."
        options:
          - '-'
          - '-core-'
          - '-ffmpeg-'

jobs:
  ffmpeg-build:
    if: inputs.build_ffmpeg == true
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
          - target: x86_64-pc-windows-gnu
            os: ubuntu-latest
          - target: x86_64-apple-darwin
            os: macOS-latest
          - target: aarch64-apple-darwin
            os: macOS-latest

    runs-on: ${{ matrix.os }}
    continue-on-error: true
    steps:
      - name: Setup | Checkout
        uses: actions/checkout@v2.4.0

      # https://trac.ffmpeg.org/wiki/CompilationGuide/Ubuntu
      - name: Setup | FFmpeg Build Tools [Linux]
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update -qq && sudo apt-get -y install \
            autoconf \
            automake \
            build-essential \
            cmake \
            git-core \
            libass-dev \
            libfreetype6-dev \
            libgnutls28-dev \
            libsdl2-dev \
            libtool \
            libva-dev \
            libvdpau-dev \
            libvorbis-dev \
            libxcb1-dev \
            libxcb-shm0-dev \
            libxcb-xfixes0-dev \
            pkg-config \
            texinfo \
            wget \
            mingw-w64
          sudo apt-get -y install nasm
          sudo apt-get -y install libx264-dev
          sudo apt-get -y install libx265-dev libnuma-dev
          sudo apt-get -y install libvpx-dev
          sudo apt-get -y install libfdk-aac-dev
          sudo apt-get -y install libmp3lame-dev
          sudo apt-get -y install libopus-dev

      # https://trac.ffmpeg.org/wiki/CompilationGuide/macOS#Compiling
      - name: Setup | FFmpeg Build Tools [macOS]
        if: matrix.os == 'macOS-latest'
        run: |
          brew install automake fdk-aac lame libass libtool libvorbis libvpx opus sdl shtool texi2html theora x264 x265 xvid nasm

      - name: Build | FFmpeg
        run: |
          pushd crates/iori
          ./build/build.rs ${{ matrix.target }}
          popd

      - name: Deploy | Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ffmpeg-${{ matrix.target }}
          path: crates/iori/tmp/ffmpeg_build

  create-release:
    if: inputs.create_release == true
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: taiki-e/create-gh-release-action@v1
        with:
          prefix: ${{ inputs.binary_name }}
          token: ${{ secrets.GITHUB_TOKEN }}

  upload-assets:
    needs: [create-release, ffmpeg-build]
    if: |
      always() &&
      !contains(needs.*.result, 'failure') &&
      !contains(needs.*.result, 'cancelled')
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
          - target: x86_64-apple-darwin
            os: macos-latest
          - target: aarch64-apple-darwin
            os: macos-latest
          - target: x86_64-pc-windows-gnu
            os: ubuntu-latest
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup | Protoc
        uses: arduino/setup-protoc@v3
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup | Compiled FFmpeg
        if: inputs.build_ffmpeg == true
        uses: actions/download-artifact@v4
        with:
          name: ffmpeg-${{ matrix.target }}
          path: ${{ github.workspace }}/crates/iori/tmp/ffmpeg_build

      - name: Setup | Environment [-nix]
        if: inputs.build_ffmpeg == true && matrix.target != 'x86_64-pc-windows-gnu'
        run: |
          echo FFMPEG_INCLUDE_DIR="${{ github.workspace }}/crates/iori/tmp/ffmpeg_build/include" >> $GITHUB_ENV
          echo FFMPEG_PKG_CONFIG_PATH="${{ github.workspace }}/crates/iori/tmp/ffmpeg_build/lib/pkgconfig" >> $GITHUB_ENV
          echo PKG_CONFIG_PATH_FOR_TARGET="${{ github.workspace }}/crates/iori/tmp/ffmpeg_build/lib/pkgconfig" >> $GITHUB_ENV
          echo PKG_CONFIG_ALLOW_CROSS=1 >> $GITHUB_ENV
  
      - name: Setup | Environment [Windows]
        if: matrix.target == 'x86_64-pc-windows-gnu'
        run: |
          sudo apt-get update -qq && sudo apt-get -y install \
            mingw-w64
          echo FFMPEG_INCLUDE_DIR="${{ github.workspace }}/crates/iori/tmp/ffmpeg_build/include" >> $GITHUB_ENV
          echo FFMPEG_LIBS_DIR="${{ github.workspace }}/crates/iori/tmp/ffmpeg_build/lib" >> $GITHUB_ENV
          echo PKG_CONFIG_PATH_FOR_TARGET="${{ github.workspace }}/crates/iori/tmp/ffmpeg_build/lib/pkgconfig" >> $GITHUB_ENV
          echo PKG_CONFIG_ALLOW_CROSS=1 >> $GITHUB_ENV

      - uses: taiki-e/upload-rust-binary-action@v1
        with:
          bin: ${{ inputs.binary_name }}
          archive: '$bin${{ inputs.archive_suffix }}$target'
          target: ${{ matrix.target }}
          features: ${{ inputs.features || '' }}
          tar: unix
          zip: windows
          token: ${{ secrets.GITHUB_TOKEN }}
