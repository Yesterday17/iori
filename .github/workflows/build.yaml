name: Build
on: [push]

jobs:
  ffmpeg-build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
          - target: x86_64-pc-windows-msvc
            os: ubuntu-latest
          - target: x86_64-apple-darwin
            os: macOS-latest
          - target: aarch64-apple-darwin
            os: macOS-latest

    runs-on: ${{ matrix.os }}
    continue-on-error: true
    steps:
      - name: Setup | Checkout
        uses: actions/checkout@v2.4.0

      # https://trac.ffmpeg.org/wiki/CompilationGuide/Ubuntu
      - name: Setup | FFmpeg Build Tools [Linux]
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update -qq && sudo apt-get -y install \
            autoconf \
            automake \
            build-essential \
            cmake \
            git-core \
            libass-dev \
            libfreetype6-dev \
            libgnutls28-dev \
            libsdl2-dev \
            libtool \
            libva-dev \
            libvdpau-dev \
            libvorbis-dev \
            libxcb1-dev \
            libxcb-shm0-dev \
            libxcb-xfixes0-dev \
            pkg-config \
            texinfo \
            wget \
            yasm \
            zlib1g-dev \
            mingw-w64
          sudo apt-get -y install nasm
          sudo apt-get -y install libx264-dev
          sudo apt-get -y install libx265-dev libnuma-dev
          sudo apt-get -y install libvpx-dev
          sudo apt-get -y install libfdk-aac-dev
          sudo apt-get -y install libmp3lame-dev
          sudo apt-get -y install libopus-dev

      # https://trac.ffmpeg.org/wiki/CompilationGuide/macOS#Compiling
      - name: Setup | FFmpeg Build Tools [macOS]
        if: matrix.os == 'macOS-latest'
        run: |
          brew install automake fdk-aac git lame libass libtool libvorbis libvpx opus sdl shtool texi2html theora wget x264 x265 xvid nasm

      - name: Build | FFmpeg
        run: |
          pushd crates/iori
          ./build/build.rs ${{ matrix.target }}
          popd
      
      - name: PostBuild | Make Shared Library [Windows]
        if: matrix.target == 'x86_64-pc-windows-msvc'
        run: |
          cd ./crates/iori/tmp/ffmpeg_build/lib
          i686-w64-mingw32-gcc -shared -o libffmpeg.dll \
            -Wl,--out-implib,libffmpeg.lib \
            -Wl,--whole-archive *.a -Wl,--no-whole-archive \
            -lgdi32 \
            -lpsapi \
            -lole32 \
            -lstrmiids \
            -luuid \
            -loleaut32 \
            -lshlwapi \
            -luser32 \
            -lws2_32 \
            -lvfw32 \
            -luser32 \
            -lsecur32 \
            -lbcrypt \
            -lm \
            -lpsapi \
            -ladvapi32 \
            -lshell32 \
            -lole32 \
            -lmfplat \
            -static-libgcc \
            -static-libstdc++

      - name: Deploy | Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ffmpeg-${{ matrix.target }}
          path: crates/iori/tmp/ffmpeg_build

  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: iori-x86_64-unknown-linux-gnu.tar.gz
          # - target: x86_64-unknown-linux-musl
          #   os: ubuntu-latest
          #   name: iori-x86_64-unknown-linux-musl.tar.gz
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            name: iori-x86_64-pc-windows-msvc.zip
          - target: x86_64-apple-darwin
            os: macOS-latest
            name: iori-x86_64-apple-darwin.tar.gz
          - target: aarch64-apple-darwin
            os: macOS-latest
            name: iori-arm64-apple-darwin.tar.gz

    needs: [ffmpeg-build]
    runs-on: ${{ matrix.os }}
    continue-on-error: true
    steps:
      - name: Setup | Checkout
        uses: actions/checkout@v2.4.0

      - name: Setup | Cache Cargo
        uses: actions/cache@v4.2.0
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Setup | Cache Cargo Target
        uses: actions/cache@v4.2.0
        with:
          path: target
          key: ${{ matrix.target }}-cargo-target

      - name: Setup | Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          profile: minimal
          target: ${{ matrix.target }}

      - name: Setup | Protoc
        uses: arduino/setup-protoc@v3
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Setup | Compiled FFmpeg
        uses: actions/download-artifact@v4
        with:
          name: ffmpeg-${{ matrix.target }}
          path: ${{ github.workspace }}/crates/iori/tmp/ffmpeg_build

      - name: Setup | Install LLVM and Clang [Windows]
        if: matrix.os == 'windows-latest'
        uses: KyleMayes/install-llvm-action@v1
        with:
          version: "10.0"
          directory: ${{ github.workspace }}/clang
      
      - name: Setup | Environment [Windows]
        if: matrix.os == 'windows-latest'
        run: |
          echo "LIBCLANG_PATH=${{ github.workspace }}\\clang\\lib" >> $env:GITHUB_ENV
          echo "LLVM_CONFIG_PATH=${{ github.workspace }}\\clang\\bin\\llvm-config" >> $env:GITHUB_ENV
          echo "FFMPEG_INCLUDE_DIR=${{ github.workspace }}\\crates\\iori\\tmp\\ffmpeg_build\\include" >> $env:GITHUB_ENV
          echo "FFMPEG_PKG_CONFIG_PATH=${{ github.workspace }}\\crates\\iori\\tmp\\ffmpeg_build\\lib\\pkgconfig" >> $env:GITHUB_ENV
          echo "PKG_CONFIG_PATH_FOR_TARGET=${{ github.workspace }}\\crates\\iori\\tmp\\ffmpeg_build\\lib\\pkgconfig" >> $env:GITHUB_ENV
          echo "PKG_CONFIG_ALLOW_CROSS=1" >> $env:GITHUB_ENV

      - name: Setup | Environment [-nix]
        if: matrix.os != 'windows-latest'
        run: |
          echo FFMPEG_INCLUDE_DIR="${{ github.workspace }}/crates/iori/tmp/ffmpeg_build/include" >> $GITHUB_ENV
          echo FFMPEG_PKG_CONFIG_PATH="${{ github.workspace }}/crates/iori/tmp/ffmpeg_build/lib/pkgconfig" >> $GITHUB_ENV
          echo PKG_CONFIG_PATH_FOR_TARGET="${{ github.workspace }}/crates/iori/tmp/ffmpeg_build/lib/pkgconfig" >> $GITHUB_ENV
          echo PKG_CONFIG_ALLOW_CROSS=1 >> $GITHUB_ENV

      - name: Build | Build
        run: |
          cargo build --release --locked --all-features --target ${{ matrix.target }} --workspace --exclude srr

      - name: PostBuild | Prepare artifacts [Windows]
        if: matrix.os == 'windows-latest'
        run: |
          cd target/${{ matrix.target }}/release
          strip minyami.exe
          strip ssadecrypt.exe
          strip shiori.exe
          7z a ../../../${{ matrix.name }} minyami.exe ssadecrypt.exe shiori.exe
          cd -
      - name: PostBuild | Prepare artifacts [-nix]
        if: matrix.os != 'windows-latest'
        run: |
          cd target/${{ matrix.target }}/release
          strip minyami || true
          strip ssadecrypt || true
          strip shiori || true
          tar czvf ../../../${{ matrix.name }} minyami ssadecrypt shiori
          cd -

      - name: Deploy | Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}
          path: ${{ matrix.name }}
